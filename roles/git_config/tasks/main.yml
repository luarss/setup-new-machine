---
- name: Load secrets file if it exists
  include_vars: "{{ playbook_dir }}/../secrets.yml"
  ignore_errors: true
  
- name: Configure Git settings
  block:
    - name: Set Git user name from secrets
      git_config:
        name: user.name
        value: "{{ git_user.name }}"
        scope: global
      when: git_user is defined and git_user.name is defined

    - name: Set Git user email from secrets
      git_config:
        name: user.email
        value: "{{ git_user.email }}"
        scope: global
      when: git_user is defined and git_user.email is defined

    - name: Check existing git configuration
      command: git config --global --get {{ item.key }}
      register: git_config_check
      failed_when: false
      changed_when: false
      loop: "{{ git_config.default_settings }}"

    - name: Set default Git configuration (only if not already set or different)
      git_config:
        name: "{{ item.item.key }}"
        value: "{{ item.item.value }}"
        scope: global
      loop: "{{ git_config_check.results }}"
      when: item.rc != 0 or item.stdout != item.item.value

    - name: Check if SSH key exists
      stat:
        path: "{{ ansible_env.HOME }}/.ssh/id_rsa"
      register: ssh_key_stat

    - name: Generate SSH key if not exists
      openssh_keypair:
        path: "{{ ansible_env.HOME }}/.ssh/id_rsa"
        type: "{{ ssh_key.type | default('rsa') }}"
        size: "{{ ssh_key.size | default(4096) }}"
        comment: "{{ ssh_key.comment | default(git_user.email | default('')) }}"
        owner: "{{ ansible_env.USER }}"
        mode: '0600'
      when: not ssh_key_stat.stat.exists

    - name: Display SSH public key
      slurp:
        src: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub"
      register: ssh_public_key
      when: not ssh_key_stat.stat.exists

    - name: Show SSH public key
      debug:
        msg: "SSH public key generated: {{ ssh_public_key.content | b64decode }}"
      when: not ssh_key_stat.stat.exists
  when: git_config_enabled | default(true)